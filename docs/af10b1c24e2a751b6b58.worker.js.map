{"version":3,"sources":["../webpack/bootstrap af10b1c24e2a751b6b58","workers/getBlockData.worker.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mDAAmD,2BAA2B,GAAG,eAAe;AAChG,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","file":"af10b1c24e2a751b6b58.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/symphony-2/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap af10b1c24e2a751b6b58","importScripts('https://www.gstatic.com/firebasejs/6.3.3/firebase-app.js')\r\nimportScripts('https://www.gstatic.com/firebasejs/6.3.3/firebase-firestore.js')\r\nimportScripts('https://www.gstatic.com/firebasejs/6.3.3/firebase-auth.js')\r\n\r\nlet config = {}\r\n\r\nself.addEventListener('message', async function (e) {\r\n  let data = e.data\r\n  switch (data.cmd) {\r\n    case 'get':\r\n\r\n      config = data.config\r\n\r\n      firebase.initializeApp(config.fireBase)\r\n\r\n      firebase.firestore()\r\n      const firebaseDB = firebase.firestore()\r\n      const docRef = firebaseDB.collection('bitcoin_blocks')\r\n      const docRefUpdate = firebaseDB.collection('bitcoin_update')\r\n\r\n      firebase.auth().signInAnonymously().catch(function (error) {\r\n        console.log(error.code)\r\n        console.log(error.message)\r\n      })\r\n\r\n      // let blockDataHelper = new BlockDataHelper({\r\n      //   config: config\r\n      // })\r\n\r\n      // first check firebase\r\n      let blockRef = docRef.doc(data.hash)\r\n      let snapshot = await blockRef.get()\r\n\r\n      let blockData\r\n      let shouldCache = false\r\n\r\n      if (!snapshot.exists) {\r\n        console.log('Block data not in db')\r\n        shouldCache = true\r\n      } else {\r\n        blockData = snapshot.data()\r\n        // check if block was cached more than a week ago\r\n        if (Date.now() - blockData.cacheTime.toMillis() > 604800000) {\r\n          // console.log('Block: ' + data.hash + ' is out of date, marked for update')\r\n          shouldCache = true\r\n        }\r\n      }\r\n\r\n      if (!shouldCache) {\r\n        // console.log('Block data for: ' + data.hash + ' returned from cache')\r\n      } else {\r\n        let snapshots = await docRefUpdate.get()\r\n        let heightsToUpdate = []\r\n        snapshots.forEach(snapshot => {\r\n          let updateDataArr = snapshot.data()\r\n          heightsToUpdate = updateDataArr.heights\r\n        })\r\n        if (heightsToUpdate.indexOf(data.height) === -1) {\r\n          heightsToUpdate.push(data.height)\r\n        }\r\n        if (heightsToUpdate.length > 0) {\r\n          try {\r\n            await docRefUpdate.doc('heights').set({ heights: heightsToUpdate }, { merge: false })\r\n          } catch (error) {\r\n            console.log(error)\r\n          }\r\n        }\r\n      }\r\n\r\n      if (typeof blockData === 'undefined') {\r\n        let returnData = {\r\n          error: 'Failed to get blockdata from API'\r\n        }\r\n\r\n        self.postMessage(returnData)\r\n      } else {\r\n        blockData.tx.forEach((tx, i) => {\r\n          data.txValues[i] = tx.value\r\n          data.txSpentRatios[i] = tx.spentRatio\r\n          data.txIndexes[i] = tx.index\r\n        })\r\n\r\n        blockData.tx = []\r\n      }\r\n\r\n      let returnData = {\r\n        blockData: blockData,\r\n        txValues: data.txValues,\r\n        txSpentRatios: data.txSpentRatios,\r\n        txIndexes: data.txIndexes\r\n      }\r\n\r\n      self.postMessage(returnData, [\r\n        data.txValues.buffer,\r\n        data.txSpentRatios.buffer,\r\n        data.txIndexes.buffer\r\n      ])\r\n\r\n      break\r\n    case 'stop':\r\n      self.postMessage('WORKER STOPPED')\r\n      self.close()\r\n      break\r\n    default:\r\n      self.postMessage('Unknown command')\r\n  }\r\n}, false)\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/eslint-loader?{\"eslintPath\":\"C://repositories//symphony-2-lite//node_modules//eslint//lib//api.js\"}!./src/workers/getBlockData.worker.js\n// module id = 0\n// module chunks = 0"],"sourceRoot":""}